#!/usr/bin/python

"""
Custom topology for Mininet, generated by GraphML-Topo-to-Mininet-Network-Generator.
"""
from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import RemoteController
from mininet.node import Node
from mininet.node import CPULimitedHost
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.util import dumpNodeConnections

class GeneratedTopo( Topo ):
    "Internet Topology Zoo Specimen."

    def __init__( self, **opts ):
        "Create a topology."

        # Initialize Topology
        Topo.__init__( self, **opts )

        # add nodes, switches first...
        NY54 = self.addSwitch( 's0' )
        CMBR = self.addSwitch( 's1' )
        CHCG = self.addSwitch( 's2' )
        CLEV = self.addSwitch( 's3' )
        RLGH = self.addSwitch( 's4' )
        ATLN = self.addSwitch( 's5' )
        PHLA = self.addSwitch( 's6' )
        WASH = self.addSwitch( 's7' )
        NSVL = self.addSwitch( 's8' )
        STLS = self.addSwitch( 's9' )
        NWOR = self.addSwitch( 's10' )
        HSTN = self.addSwitch( 's11' )
        SNAN = self.addSwitch( 's12' )
        DLLS = self.addSwitch( 's13' )
        ORLD = self.addSwitch( 's14' )
        DNVR = self.addSwitch( 's15' )
        KSCY = self.addSwitch( 's16' )
        SNFN = self.addSwitch( 's17' )
        SCRM = self.addSwitch( 's18' )
        PTLD = self.addSwitch( 's19' )
        STTL = self.addSwitch( 's20' )
        SLKC = self.addSwitch( 's21' )
        LA03 = self.addSwitch( 's22' )
        SNDG = self.addSwitch( 's23' )
        PHNX = self.addSwitch( 's24' )

        # ... and now hosts
        NY54_host = self.addHost( 'h0' )
        CMBR_host = self.addHost( 'h1' )
        CHCG_host = self.addHost( 'h2' )
        CLEV_host = self.addHost( 'h3' )
        RLGH_host = self.addHost( 'h4' )
        ATLN_host = self.addHost( 'h5' )
        PHLA_host = self.addHost( 'h6' )
        WASH_host = self.addHost( 'h7' )
        NSVL_host = self.addHost( 'h8' )
        STLS_host = self.addHost( 'h9' )
        NWOR_host = self.addHost( 'h10' )
        HSTN_host = self.addHost( 'h11' )
        SNAN_host = self.addHost( 'h12' )
        DLLS_host = self.addHost( 'h13' )
        ORLD_host = self.addHost( 'h14' )
        DNVR_host = self.addHost( 'h15' )
        KSCY_host = self.addHost( 'h16' )
        SNFN_host = self.addHost( 'h17' )
        SCRM_host = self.addHost( 'h18' )
        PTLD_host = self.addHost( 'h19' )
        STTL_host = self.addHost( 'h20' )
        SLKC_host = self.addHost( 'h21' )
        LA03_host = self.addHost( 'h22' )
        SNDG_host = self.addHost( 'h23' )
        PHNX_host = self.addHost( 'h24' )

        # add edges between switch and corresponding host
        self.addLink( NY54 , NY54_host )
        self.addLink( CMBR , CMBR_host )
        self.addLink( CHCG , CHCG_host )
        self.addLink( CLEV , CLEV_host )
        self.addLink( RLGH , RLGH_host )
        self.addLink( ATLN , ATLN_host )
        self.addLink( PHLA , PHLA_host )
        self.addLink( WASH , WASH_host )
        self.addLink( NSVL , NSVL_host )
        self.addLink( STLS , STLS_host )
        self.addLink( NWOR , NWOR_host )
        self.addLink( HSTN , HSTN_host )
        self.addLink( SNAN , SNAN_host )
        self.addLink( DLLS , DLLS_host )
        self.addLink( ORLD , ORLD_host )
        self.addLink( DNVR , DNVR_host )
        self.addLink( KSCY , KSCY_host )
        self.addLink( SNFN , SNFN_host )
        self.addLink( SCRM , SCRM_host )
        self.addLink( PTLD , PTLD_host )
        self.addLink( STTL , STTL_host )
        self.addLink( SLKC , SLKC_host )
        self.addLink( LA03 , LA03_host )
        self.addLink( SNDG , SNDG_host )
        self.addLink( PHNX , PHNX_host )

        # add edges between switches
        self.addLink( NY54 , CMBR)
        self.addLink( NY54 , CHCG)
        self.addLink( NY54 , PHLA)
        self.addLink( NY54 , WASH)
        self.addLink( CMBR , PHLA)
        self.addLink( CHCG , CLEV)
        self.addLink( CHCG , PHLA)
        self.addLink( CHCG , STLS)
        self.addLink( CHCG , DNVR)
        self.addLink( CHCG , KSCY)
        self.addLink( CHCG , SNFN)
        self.addLink( CHCG , STTL)
        self.addLink( CHCG , SLKC)
        self.addLink( CLEV , NSVL)
        self.addLink( CLEV , STLS)
        self.addLink( CLEV , PHLA)
        self.addLink( RLGH , ATLN)
        self.addLink( RLGH , WASH)
        self.addLink( ATLN , WASH)
        self.addLink( ATLN , NSVL)
        self.addLink( ATLN , STLS)
        self.addLink( ATLN , DLLS)
        self.addLink( ATLN , ORLD)
        self.addLink( PHLA , WASH)
        self.addLink( NSVL , STLS)
        self.addLink( NSVL , DLLS)
        self.addLink( STLS , DLLS)
        self.addLink( STLS , KSCY)
        self.addLink( STLS , LA03)
        self.addLink( NWOR , HSTN)
        self.addLink( NWOR , DLLS)
        self.addLink( NWOR , ORLD)
        self.addLink( HSTN , SNAN)
        self.addLink( HSTN , DLLS)
        self.addLink( HSTN , ORLD)
        self.addLink( SNAN , PHNX)
        self.addLink( SNAN , DLLS)
        self.addLink( DLLS , DNVR)
        self.addLink( DLLS , KSCY)
        self.addLink( DLLS , SNFN)
        self.addLink( DLLS , LA03)
        self.addLink( DNVR , KSCY)
        self.addLink( DNVR , SNFN)
        self.addLink( DNVR , SLKC)
        self.addLink( KSCY , SNFN)
        self.addLink( SNFN , SCRM)
        self.addLink( SNFN , PTLD)
        self.addLink( SNFN , STTL)
        self.addLink( SNFN , SLKC)
        self.addLink( SNFN , LA03)
        self.addLink( SCRM , SLKC)
        self.addLink( PTLD , STTL)
        self.addLink( SLKC , LA03)
        self.addLink( LA03 , SNDG)
        self.addLink( LA03 , PHNX)
        self.addLink( LA03 , PHNX)
        self.addLink( SNDG , PHNX)

topos = { 'generated': ( lambda: GeneratedTopo() ) }

from mininet.topolib import TreeTopo
from mininet.node import Host
from mininet.node import OVSKernelSwitch, Controller, RemoteController


if __name__ == '__main__':
    OVSKernelSwitch.setup()
    net = Mininet(
        topo= GeneratedTopo(),
        switch=OVSKernelSwitch,
        build=False,
        link=TCLink,
        host=CPULimitedHost
    )
    c = RemoteController('c0', ip='127.0.0.1', port=6633)
    net.addController(c)
    net.build()
    net.start()
    #net.staticArp()
    MTU = 1400
    MSS = MTU - 14 - 40 - 20
    for h in net.hosts:
        # reset virtual host MTU
        h.cmd("ip link set %s-eth0 mtu %d > /dev/null 2>&1 &" % (h, MTU))
        # start iperf3 server on each host
        h.cmd("iperf -s > /dev/null 2>&1 &")
        # start request
        hid = int(h.name.replace('h',''))
        h.cmd("python host_script.py %d %d %d %d %d > /dev/null 2>&1 &" % (MSS, len(net.hosts), hid, 1, 100))
    #for h in net.hosts:
    #    h.cmd("iperf3 -c 10.0.0.1 -M 1440 &")
    CLI( net )
    net.stop()

